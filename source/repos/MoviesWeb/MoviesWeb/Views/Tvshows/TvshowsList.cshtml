@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@model MoviesAPI.Models.MovieAndTvshow_Model;
@inject IAuthorizationService AuthorizationService

@{
    bool isAuthenticated = User.Identity.IsAuthenticated;
    bool isAdmin = false;

    if (isAuthenticated)
    {
        // Check for the ADMIN claim
        isAdmin = User.Claims.Any(c => c.Type == "ADMIN" && c.Value == "ADMIN");
    }
    var items = Model.Movie.Select(m => new
    {
        Id = m.Id,
        Name = m.Name,
        Image = m.Image,
        Price = m.Price,
        Details = m.Details,
        Type = "Movie",
        Year = m.Release_date.Year, // Ensure this is an integer
        Genre = m.Genre,
        Rating = m.Rating
    }).Union(
           Model.Tvshow.Select(tv => new
           {
               Id = tv.Id,
               Name = tv.Name,
               Image = tv.Image,
               Price = tv.Price,
               Details = tv.Details,
               Type = "Tvshow",
               Year = tv.Release_date.Year, // Ensure this is an integer
               Genre = tv.Genre,
               Rating = tv.Rating
           })
       ).ToList();
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TV Shows List - MoviesWeb</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <style>
        body {
            background-color: #121212; /* Dark theme */
            color: #f1f1f1;
        }
        .row{
            --bs-gutter-x:0;
        }

        .container {
            margin-top: 50px;
            max-width: 1600px;
        }

        .tvshow-card {
/*             background-color: #1e1e1e;
 */            overflow: hidden;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            /* border: 1px solid #403d3d;
            border-radius: 10px; */
        }

        .tvshow-card:hover {
            transform: translateY(-10px);
            box-shadow: 0px 6px 20px rgba(0, 0, 0, 0.8);
        }

        .tvshow-card a {
            text-decoration: none;
            color: white;
        }

        .poster-container {
            position: relative;
        }

        .poster {
            width: 97%;
/*             height: 350px;
 */         
            height:400px;
            border: 1px solid #403d3d;
            border-radius: 10px;
            background-color: #1e1e1e;

            object-fit: cover;
            border-bottom: 4px solid #E5A00D; /* Accent color */
        }

        .hover-dialog {
            width: 97%;
            border-radius: 5px;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: rgba(0, 0, 0, 0.85);
            color: white;
            padding: 15px;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .poster-container:hover .hover-dialog {
            opacity: 1;
            visibility: visible;
        }

        .hover-dialog h5 {
            font-size: 1.25rem;
            margin-bottom: 10px;
        }

        .hover-dialog p {
            font-size: 0.9rem;
            margin-bottom: 5px;
        }

        .hover-dialog .btn {
            font-size: 0.85rem;
            padding: 6px 12px;
        }

        .btn-outline-secondary {
            color: #E5A00D;
            border-color: #E5A00D;
        }

        .btn-outline-secondary:hover {
            background-color: #E5A00D;
            color: #121212;
        }

        .navbar-collapse {
            flex-grow: 0;
        }

        .col-lg-3 {
            width: 20%;
        }

        /* Filter Styles */
        .filter-header {
            margin-bottom: 1.5rem;
            font-size: 1.75rem;
            font-weight: 600;
            color: #333;
        }

        .filter-form {
            display: flex;
            flex-wrap: wrap; /* Allows the form to wrap if it overflows */
            gap: 1.5rem; /* Space between form elements */
        }

        .form-label {
            display: none; /* Hide labels */
        }

       

        .form-select {
            appearance: none; /* Remove default arrow */
            -webkit-appearance: none;
            -moz-appearance: none;
            background-color: #f9fafb1c;
            color: white; /* Text color */
            padding: 0.5rem;
            padding-right: 3rem;
            border: none;
            border-radius: 6px;
            position: relative;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-caret-down-fill" viewBox="0 0 16 16"> <path d="M7.247 11.14l-4.796-5.481C2.104 5.224 2.538 4.5 3.25 4.5h9.5c.712 0 1.146.724.799 1.159l-4.796 5.481a1 1 0 0 1-1.506 0z"/> </svg>');
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 12px 12px;
        }

            /* Adjust the select element width for padding */
            .form-select:focus {
                outline: none;
                border-color: #66afe9;
                box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
            }

            .form-select option {
                background-color: #333; /* Background color of dropdown options */
                color: white; /* Text color of dropdown options */
            }


       

        @@media (max-width: 1300px) {
            .col-lg-3 {
                flex: 0 0 auto;
                width: 33%;
            }
        }



        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .filter-form {
                flex-direction: column; /* Stack form elements vertically on smaller screens */
            }

            .form-select {
                width: 100%; /* Full width on smaller screens */
            }

            .col-lg-3 {
                flex: 0 0 auto;
                width: 50%;
            }
        }

       

    </style>
</head>
<body>
  <!-- Form for filtering -->
<div class="container">
    <form id="movieFilterForm" class="filter-form">
        <div class="form-group">
            <label for="type" class="form-label">Type</label>
            <select id="type" class="form-select">
                <option value="">Select Type</option>
                <option value="Movie">Movie</option>
                <option value="Tvshow">TV Show</option>
            </select>
        </div>
        <div class="form-group">
            <label for="year" class="form-label">Year</label>
            <select id="year" class="form-select">
                <option value="">Select Year</option>
                <!-- Add years dynamically -->
            </select>
        </div>
        <div class="form-group">
            <label for="genre" class="form-label">Genre</label>
            <select id="genre" class="form-select">
                <option value="">Select Genre</option>
                <!-- Add genres dynamically -->
            </select>
        </div>
        <div class="form-group">
            <label for="rating" class="form-label">Rating</label>
            <select id="rating" class="form-select">
                <option value="">Select Rating</option>
                <!-- Add rating options dynamically -->
            </select>
        </div>
        <div class="form-group">
            <label for="price" class="form-label">Price</label>
            <select id="price" class="form-select">
                <option value="">Select Price Range</option>
                <!-- Add price ranges dynamically -->
            </select>
        </div>
    </form>
</div>

<!-- Movie and TV show cards -->
@if (items != null && items.Count > 0)
{
    <div class="container">
        <div class="row">
            @foreach (var item in items)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4  tvshow-card"
                     data-id="@item.Id"
                     data-type="@item.Type"
                     data-year="@item.Year"
                     data-genre="@item.Genre"
                     data-rating="@item.Rating"
                     data-price="@item.Price">
                    <a href="@Url.Action(item.Type == "Movie" ? "DetailsMovie" : "DetailsTvshows", item.Type == "Movie" ? "Movies" : "Tvshows", new { id = item.Id })">
                        <div class="poster-container" data-id="@item.Id">
                            @if (item.Image != null && item.Image.Length > 0)
                            {
                                <img src="data:image;base64,@Convert.ToBase64String(item.Image)" class="poster" alt="@item.Name" />
                            }
                            else
                            {
                                <img src="https://via.placeholder.com/350x200" class="poster" alt="No Image Available" />
                            }

                            <div class="hover-dialog">
                                <h5>@item.Name</h5>
                                <p>Price: @item.Price.ToString("C")</p>
                                <p>@item.Details</p>
                                    @if (isAdmin)
                                    {
                                        <form method="post" action="@Url.Action(item.Type == "Movie" ? "Delete" : "Delete", item.Type == "Movie" ? "Movies" : "Tvshows")" onsubmit="return confirmDelete();">
                                            <input type="hidden" name="id" value="@item.Id" />
                                            <button type="submit" class="btn btn-outline-secondary btn-rounded mx-2" role="button">Delete</button>
                                        </form>
                                    }

                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>
}
@* Add your scripts here *@
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

<script>
    $(document).ready(function () {
        var items = $(".tvshow-card");

        // Populate filter options dynamically
        populateFilterOptions();

        $("#movieFilterForm select").on("change", function () {
            var type = $("#type").val();
            var year = $("#year").val();
            var genre = $("#genre").val();
            var rating = $("#rating").val();
            var price = $("#price").val();

            items.each(function () {
                var item = $(this);
                var itemType = item.data("type");
                var itemYear = item.data("year");
                var itemGenre = item.data("genre");
                var itemRating = item.data("rating");
                var itemPrice = item.data("price");

                var matchesType = !type || itemType === type;
                var matchesYear = !year || itemYear == year;
                var matchesGenre = !genre || itemGenre.includes(genre);
                var matchesRating = !rating || itemRating >= rating;
                var matchesPrice = !price || itemPrice <= price;

                   



                if (matchesType && matchesYear && matchesGenre && matchesRating && matchesPrice) {
                    item.show();
                } else {
                    item.hide();
                }
            });
        });

        function populateFilterOptions() {
            var years = [];
            var genres = [];
            var ratings = [];
            var prices = [];

            items.each(function () {
                var item = $(this);
                var year = item.data("year");
                var genre = item.data("genre");
                var rating = item.data("rating");
                var price = item.data("price");

                if (year && !years.includes(year)) {
                    years.push(year);
                }
                if (genre && !genres.includes(genre)) {
                    genres.push(genre);
                }
                if (rating && !ratings.includes(rating)) {
                    ratings.push(rating);
                }
                if (price && !prices.includes(price)) {
                    prices.push(price);
                }
            });

            populateSelectOptions("#year", years.sort());
            populateSelectOptions("#genre", genres.sort());
            populateSelectOptions("#rating", ratings.sort());
            populateSelectOptions("#price", prices.sort());
        }

        function populateSelectOptions(selector, options) {
            var $select = $(selector);
            $select.empty().append('<option value="">Select</option>');
            options.forEach(function (option) {
                $select.append('<option value="' + option + '">' + option + '</option>');
            });
        }
    });

        function confirmDelete() {
            return confirm("Are you sure you want to delete this item?");
        }

</script>
</body>
</html>
